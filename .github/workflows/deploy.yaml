on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Login to docker hub
        env:
          REPOSITORY: nestjs-api
          IMAGE_TAG: jwozniak/api-dev1
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t $IMAGE_TAG .
          docker tag $IMAGE_TAG:latest $IMAGE_TAG:release
          docker push $IMAGE_TAG:release
      #        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
  #      - name: Build docker image
  #        run: docker build -t $IMAGE_TAG .
  #      - name: Publish image to docker hub
  #        run: docker push jwozniak/api-dev1:v1:latest

  deploy:
    name: Deploy the new Docker image to EC2
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: ssh into the ec2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
      - name: Pull image from docker hub
        env:
          REPOSITORY: nestjs-api
          IMAGE_TAG: jwozniak/api-dev1
        run: |
          #          docker pull $IMAGE_TAG:release
               docker pull jwozniak/api-dev1:release
      - name: Delete old container
        run: docker rm -f nodejs-app-container
      - name: Run docker container
        #        run: docker run -d -p 3000:3000 --name api-dev1 $IMAGE_TAG:release
        run: docker run -d -p 80:3000 --name api-dev1 jwozniak/api-dev1:release

#name: Deploy to production
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  create-docker-image:
#    name: Build and push the Docker image to ECR
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out the repository
#        uses: actions/checkout@v3
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1-node16
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#
#      - name: Log into the Amazon ECR Public
#        id: login-ecr-public
#        uses: aws-actions/amazon-ecr-login@v1
#        with:
#          registry-type: public
#
#      - name: Build, tag, and push docker image to Amazon ECR Public
#        env:
#          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
#          REGISTRY_ALIAS: e2b3j8w6
#          REPOSITORY: nestjs-api
#          IMAGE_TAG: nestjs-api
#        run: |
#          docker build -t $IMAGE_TAG .
#          docker tag $IMAGE_TAG:latest $REGISTRY/$REGISTRY_ALIAS/$IMAGE_TAG:latest
#          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:latest
#
#  deploy:
#    name: Deploy the new Docker image to ECS
#    runs-on: ubuntu-latest
#    needs: create-docker-image
#    steps:
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1-node16
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: eu-central-1
#
#      - name: Update ECS service
#        run: |
#          aws ecs update-service --cluster nest_cluster --service nestjs_service --task-definition nest_task --force-new-deployment